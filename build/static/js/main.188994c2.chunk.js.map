{"version":3,"sources":["App.tsx","reportWebVitals.js","index.js"],"names":["numCols","window","screen","width","operations","generateEmpytGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","onClick","Math","random","style","display","gridTemplateColumns","map","col","k","newGrid","height","backgroundColor","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAIMA,EAAWC,OAAOC,OAAOC,MAAO,GAEhCC,EAAa,CACjB,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGDC,EAAoB,WAEtB,IADF,IAAMC,EAAO,GACFC,EAAI,EAAGA,EAhBJ,GAgBiBA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAAMT,IAAU,kBAAM,MAG7C,OAAOM,GA8GIK,EA3GO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOP,OAFiB,mBACnBQ,EADmB,KACbC,EADa,OAKIF,oBAAS,GALb,mBAKnBG,EALmB,KAKVC,EALU,KAOpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EAErB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAIhBL,GAAQ,SAAAQ,GACN,OAAOC,YAAQD,GAAG,SAAAE,GAChB,IAD6B,IAAD,WACnBjB,GACP,IAF0B,eAEjBkB,GACP,IAAIC,EAAY,EAChBtB,EAAWuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KACvBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA9Cf,IA8CiCC,GAAQ,GAAKA,EAAO/B,IACrD0B,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAbZA,EAAE,EAAGA,EAAIzB,EAASyB,IAAM,EAAxBA,IADFlB,EAAE,EAAGA,EAxCN,GAwCmBA,IAAM,EAAxBA,SAqBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,qCACE,wBACEa,QAAS,WACPjB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,MALN,SAUGL,EAAU,OAAS,UAEtB,wBACEkB,QAAS,WAEP,IADA,IAAM3B,EAAO,GACJC,EAAI,EAAGA,EAjFV,GAiFuBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAAMT,IAAU,kBAAOkC,KAAKC,SAAW,GAAM,EAAI,MAIhErB,EAAQR,IATZ,oBAcA,wBACE2B,QAAS,WACPnB,EAAQT,MAFZ,mBAQA,qBACE+B,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OAAYtC,EAAZ,YAHvB,SAMGa,EAAK0B,KAAI,SAACjC,EAAMC,GAAP,OACRD,EAAKiC,KAAI,SAACC,EAAKC,GAAN,OACP,qBAEER,QAAS,WACP,IAAMS,EAAUnB,YAAQV,GAAM,SAAAW,GAC5BA,EAASjB,GAAGkC,GAAK5B,EAAKN,GAAGkC,GAAK,EAAI,KAEpC3B,EAAQ4B,IAEVN,MAAO,CACLjC,MAAO,GACPwC,OAAQ,GACRC,gBAAiB/B,EAAKN,GAAGkC,GAAK,UAAY,QAC1CI,OAAQ,sBAZZ,UACUtC,EADV,YACekC,gBCpGZK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.188994c2.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\nimport produce from 'immer';\n\nconst numRows = 30;\nconst numCols = (window.screen.width)/20;\n\nconst operations = [\n  [0, 1],\n  [0, -1],\n  [1, -1],\n  [-1, 1], \n  [1, 1],\n  [-1, -1],\n  [1, 0],\n  [-1, 0],\n];\n\nconst generateEmpytGrid = () => {\n  const rows = [];\n    for (let i = 0; i < numRows; i++) {\n      rows.push(Array.from(Array(numCols), () => 0));\n    }\n\n    return rows;\n}\n\nconst App: React.FC = () => {\n  const [grid, setGrid] = useState(() => {\n    return generateEmpytGrid();\n  });\n\n  const [running, setRunning] = useState(false);\n\n  const runningRef = useRef(running);\n  runningRef.current = running;\n\n  const runSimulation = useCallback(() => {\n    if (!runningRef.current) {\n      return;\n    }\n    \n    setGrid(g => {\n      return produce(g, gridCopy => {\n        for (let i=0; i < numRows; i++) {\n          for (let j=0; j < numCols; j++) {\n            let neighbors = 0;\n            operations.forEach(([x, y]) => {\n              const newI = i + x;\n              const newJ = j + y;\n              if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\n                neighbors += g[newI][newJ]\n              }\n            }) \n\n            if (neighbors < 2 || neighbors > 3) {\n              gridCopy[i][j] = 0;\n            } else if (g[i][j] === 0 && neighbors === 3) {\n              gridCopy[i][j] = 1;\n            }\n          }\n        }\n      });\n    });\n\n    setTimeout(runSimulation, 1000);\n  }, [])\n\n  return (\n    <>\n      <button \n        onClick={() => {\n          setRunning(!running);\n          if (!running) {\n            runningRef.current = true;\n            runSimulation();\n          }\n          \n        }}\n      >\n        {running ? 'stop' : 'start'}\n      </button>\n      <button\n        onClick={() => {\n          const rows = [];\n          for (let i = 0; i < numRows; i++) {\n            rows.push(\n              Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\n            );\n          }\n\n          setGrid(rows);\n        }}\n      >\n        random\n      </button>\n      <button\n        onClick={() => {\n          setGrid(generateEmpytGrid());\n        }}\n      >\n          clear\n      </button>\n\n      <div \n        style={{\n          display: 'grid',\n          gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}\n      >\n        {grid.map((rows, i) => \n          rows.map((col, k) => (\n            <div \n              key={`${i}-${k}`}\n              onClick={() => {\n                const newGrid = produce(grid, gridCopy => {\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                })\n                setGrid(newGrid)\n              }}\n              style={{\n                width: 20, \n                height: 20, \n                backgroundColor: grid[i][k] ? '#64ffda' : 'black',\n                border: \"solid 1px #383838\"\n              }} \n            />\n          ))\n        )}\n      </div>\n  </>\n  )\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}